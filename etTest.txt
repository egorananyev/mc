####!/usr/bin/arch -i386 /usr/bin/python
# -*- coding: utf-8 -*-
"""
Eye Tracking Test
"""

import numpy as np
import pylink as pl

# Dimensions:
et = 1
dr = (1680,1050) # display resolution in px
cd = 32

eyeLink = ("100.1.1.1")
calTarg1 = (300,170)
calTarg2 = (330,170)
calTarg3 = (270,170)

def elEndRec(el):
    # Ends the recording; adds 100ms to catch final events
    pl.endRealTimeMode()
    pl.pumpDelay(100)
    el.stopRecording()

def eyeTrkInit (dr):
    el = pl.EyeLink()
    # sending the screen dimensions to the eye tracker:
    el.sendCommand('screen_pixel_coords = 0 0 %d %d' %dr)
    el.sendMessage('DISPLAY_COORDS 0 0 %d %d' %dr)
    el.sendCommand('generate_default_targets = NO')
    el.sendCommand('calibration_targets = %d,%d %d,%d %d,%d' % (
                    calTarg1[0], calTarg1[1],
                    calTarg2[0], calTarg2[1],
                    calTarg3[0], calTarg3[1]) )
    el.sendCommand('validation_targets = %d,%d %d,%d %d,%d' % (
                    calTarg1[0], calTarg1[1],
                    calTarg2[0], calTarg2[1],
                    calTarg3[0], calTarg3[1]) )
    # parser configuration 1 corresponds to high sensitivity to saccades:
    el.sendCommand('select_parser_configuration 1')
    # turns off "scenelink camera stuff", i.e., doesn't record the ET video
    el.sendCommand('scene_camera_gazemap = NO')
    # converting pupil area to diameter
    el.sendCommand('pupil_size_diameter = %s'%('YES'))
    return(el)
el = eyeTrkInit(dr)
print 'Finished initializing the eye tracker.'

def eyeTrkCalib (el=el,dr=dr,cd=cd):
    # "opens the graphics if the display mode is not set"
    pl.openGraphics(dr,cd)
    pl.setCalibrationColors((255,255,255),(0,177,177))
    pl.setTargetSize(10, 5) 
    pl.setCalibrationSounds("","","")
    el.setCalibrationType('H3')
    pl.setDriftCorrectSounds("","off","off")
    el.disableAutoCalibration()
    el.doTrackerSetup()
    el.drawCalTarget(calTarg1)
    el.drawCalTarget(calTarg2)
    el.drawCalTarget(calTarg3)
    pl.closeGraphics()
    el.setOfflineMode()

eyeTrkCalib()
eyeTrkCalib()

def drCor(el=el,dr=dr,cd=cd):
    pl.openGraphics(dr,cd)
    el.doDriftCorrect(300, 170, 1, 0)
    pl.closeGraphics()
    print '///Finished drift correction///'

drCor()
